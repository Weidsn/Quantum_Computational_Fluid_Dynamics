qfunc load_b(amplitudes: real[], output state: qbit[]) {
  prepare_amplitudes(amplitudes, 0.0, state);
}

qfunc hhl(rhs_vector: real[], precision: int, hamiltonian_evolution_with_power: qfunc (int, qbit[]), output state: qbit[], output phase: qnum, output indicator: qbit) {
  allocate(precision, UNSIGNED, precision, phase);
  load_b(rhs_vector, state);
  allocate(indicator);
  within {
    qpe_flexible(lambda(k) {
      hamiltonian_evolution_with_power(k, state);
    }, phase);
  } apply {
    indicator *= 1.9999999999999998 / ((((phase - (1 / (2 ** precision))) * 4.0) * ((2 ** precision) / ((2 ** precision) - 1))) + 1.9999999999999998);
  }
}

qfunc unitary_with_power_logic(pw: int, matrix: real[][], target: qbit[]) {
  power (pw) {
    unitary(matrix, target);
  }
}

qfunc main(output res: qnum, output phase: qnum, output indicator: qbit) {
  hhl([
    (-0.04400819277374005),
    (-0.8810057013756349),
    (-0.27043238434878125),
    (-0.38569231079689403)
  ], 7, lambda(arg0, arg1) {
    unitary_with_power_logic(arg0, [
      [
        ((-0.00015054529680913475) - 3.6956796015193494e-06j),
        ((-0.00030113594870683283) + 0.012266918581854837j),
        ((-0.00030113594870685815) + 0.012266918581854613j),
        (0.999548273399395 + 0.02453753284331022j)
      ],
      [
        ((-0.00030113594870691984) + 0.01226691858185456j),
        ((-0.00015054529680902373) - 3.6956796017661185e-06j),
        (0.9995482733993951 + 0.02453753284331052j),
        ((-0.00030113594870689853) + 0.012266918581854743j)
      ],
      [
        ((-0.000301135948706825) + 0.012266918581854667j),
        (0.9995482733993951 + 0.02453753284331043j),
        ((-0.00015054529680902373) - 3.6956796018279443e-06j),
        ((-0.00030113594870679586) + 0.012266918581854545j)
      ],
      [
        (0.9995482733993951 + 0.024537532843310176j),
        ((-0.00030113594870685234) + 0.01226691858185458j),
        ((-0.0003011359487068932) + 0.012266918581854549j),
        ((-0.0001505452968088017) - 3.6956796015105365e-06j)
      ]
    ], arg1);
  }, res, phase, indicator);
}
